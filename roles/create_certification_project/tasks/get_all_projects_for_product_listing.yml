---
- name: Ensure organization_id is defined
  ansible.builtin.assert:
    that: organization_id is defined
    fail_msg: "The organization_id variable is not defined"

- name: Get all certification container projects for organization
  vars:
    pyxis_apikey: "{{ lookup('file', pyxis_apikey_path) }}"
  ansible.builtin.uri:
    # Filter out the archived projects
    url: "{{ verify_project_url }}/{{ organization_id }}/projects/certification?filter=project_status%21%3Darchived&page_size={{ page_size }}&page=0"
    method: GET
    headers:
      X-API-KEY: "{{ pyxis_apikey }}"
    body_format: json
    status_code: 200
    timeout: 120
  register: cert_project_list_output
  retries: 3
  delay: 10
  until: not cert_project_list_output.failed

# This is a workaround for the Pyxis API, which lacks a correct implementation of the PATCH method.
# We must resort to using PUT and re-attach all the projects to PL from scratch.
- name: Generate a list of all projects to be linked with the Product Listing
  vars:
    query: "[?product_listings[0] == '{{ pyxis_product_list_identifier }}' && project_status != 'archived'] | []._id"
  ansible.builtin.set_fact:
    all_container_projects: "{{ cert_project_list_output.json.data | json_query(query) + [cert_project_id] }}"  # noqa: jinja[invalid]
  when: cert_project_list_output | length

- name: Print all container projects
  ansible.builtin.debug:
    var: all_container_projects

- name: Validate all_container_projects
  ansible.builtin.assert:
    that:
      - all_container_projects | length
    fail_msg: >
      Generation of all_container_projects failed, please debug
...
